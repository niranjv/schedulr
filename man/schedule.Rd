% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/simulated-annealing.R
\name{schedule}
\alias{schedule}
\title{Find optimal schedule}
\usage{
schedule(job, deadline, cluster.instance.type, cluster.size, max.iter, max.temp,
  reset.score.pct = NULL, reset.num.iters = NULL, debug = FALSE)
}
\arguments{
\item{job}{Array of integers representing sizes of tasks in job}

\item{deadline}{Time (in seconds) by which job must be completed (integer)}

\item{cluster.instance.type}{Instance type of cluster (string).
All instances in the cluster are assumed to have the same instance type}

\item{cluster.size}{Integer representing the number of instances
in the cluster}

\item{max.iter}{Max number of iterations to use to find the optimal
schedule (integer)}

\item{max.temp}{Max temperature to use in the simulated annealing
process (flaot)}

\item{reset.score.pct}{Begin next iteration from the best schedule if the
difference between the best score and best score is more than this value}

\item{reset.num.iters}{Begin next iteration from the best schedule if the
number of iterations the score has not been increasing exceeds this value}

\item{debug}{Print debug info}
}
\value{
A list representing the optimal schedule that could be found under
the given constraints
}
\description{
Want an schedule with >= .95 probability of completing job by the deadline
with the lowest makespan (cost)
}
\examples{
job <- c(1,60,100)
deadline <- 300
cluster.instance.type <- 'm3xlarge'
cluster.size <- 2
max.iter <- 2
max.temp <- 0.5
data(m3xlarge.runtimes.expdist)
setup.trainingset.runtimes('m3xlarge', m3xlarge.runtimes.expdist)
best.schedule <- schedule(job, deadline, cluster.instance.type,
cluster.size, max.iter, max.temp)
}

